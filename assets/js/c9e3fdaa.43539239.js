"use strict";(self.webpackChunktidy_screen_v_2_docs_new=self.webpackChunktidy_screen_v_2_docs_new||[]).push([[1027],{1782:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>a,default:()=>p,frontMatter:()=>i,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"examples/LA_Workshop/modeling_CZP_hCATl_binders","title":"Receptors modeling and validation","description":"Step 1: Retrieve receptors crystallographic structures","source":"@site/docs/examples/LA_Workshop/modeling_CZP_hCATl_binders.md","sourceDirName":"examples/LA_Workshop","slug":"/examples/LA_Workshop/modeling_CZP_hCATl_binders","permalink":"/TidyScreen_v2_docs_new/docs/examples/LA_Workshop/modeling_CZP_hCATl_binders","draft":false,"unlisted":false,"editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/examples/LA_Workshop/modeling_CZP_hCATl_binders.md","tags":[],"version":"current","frontMatter":{"title":"Receptors modeling and validation"}}');var r=n(4848),s=n(8453);const i={title:"Receptors modeling and validation"},a=void 0,d={},c=[];function l(e){const t={code:"code",p:"p",pre:"pre",strong:"strong",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Step 1"}),": Retrieve receptors crystallographic structures"]}),"\n",(0,r.jsx)(t.p,{children:"Using bash after project creation"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:"# Retrieve a structure corresponding to CZP\n$ mkdir -p /PATH/TO/PROJECT/docking/raw_data/2OZ2\n$ wget -O /PATH/TO/PROJECT/docking/raw_data/2OZ2/2OZ2.pdb https://files.rcsb.org/download/2OZ2.pdb\n\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Step 2"}),": Processing of raw crystallographic structures"]}),"\n",(0,r.jsx)(t.p,{children:"Processing of CZP crystal structure pdb code: 2OZ2"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:">>> from tidyscreen import tidyscreen as ts\n>>> from tidyscreen.moldock import moldock as md\n\n### Activate the project\n>>> la_workshop = ts.ActivateProject(\"la_workshop_2025\")\n\n### Instantiate a MolDock object to process the receptor models\n>>> la_workshop_moldock = md.MolDock(la_workshop)\n\n# Process CZP crystal structure\nstructure_file = \"/PATH/TO/PROJECT/docking/raw_data/2OZ2/2OZ2.pdb\"\n>>> la_workshop_moldock.process_raw_pdb(structure_file, x_coord=6.7,  y_coord=-3.7, z_coord=-22.0, x_points=40, y_points=40, z_points=40) # Note that coordinates and size of the grid box are provided\n\n\n# Outputs\nPlease provide a brief description to store with the receptor model: # Provide the requested information\n\n# Outputs\nChains found in the pdb file: {'C', 'A'} # Two chains were detected in the crystal\nChains detected: {'C', 'A'} # ID of the detected chains\nProvide the chain identifier to mantain: ('all' to keep all chains) # Indicate the chain to retain. In this tutorial we will use chain 'A'\n\n# Outputs\nNon-standard residues detected:\nThe following non-standard residues were found in the pdb file: ['D1R', 'SO4']. \nDo you want to mantain ONE of them as a REFERENCE pdb file? (y/n): # answer 'y' if a reference ligand is to be kept in a separate file. \n\n# Outputs\n\nType the 3-letter code of the residue you want to save as REFERENCE FILE:  # provide 'D1R' to retain K777 as reference ligands\n\n# Outputs\nThe following non-standard residues were found in the pdb file: ['D1R', 'SO4']. \nDo you want to mantain ONE of them in the processed receptor pdb file? (y/n): # Answer 'n'(as many times as non-standard residues exists)\n\n# Outputs\n# Informs the creation of:\n# /PATH/TO/PROJECT/docking/raw_data/2OZ2/receptor.mol2\n# /PATH/TO/PROJECT/docking/raw_data/2OZ2/receptor.pdbqt\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Step 3"}),": Compute Autodock4 grid files"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"$ cd /PATH/TO/PROJECT/docking/raw_data/2OZ2/\n$ autogrid4 -p receptor.gpf -l receptor.glg\n\n# The corresponding grid maps will be created in the receptor folder\n"})}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"Step 4"}),": Import the prepared receptor into TidyScreen"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-python",children:'>>> la_workshop_moldock.input_receptor("/PATH/TO/PROJECT/docking/raw_data/2OZ2/")\n\n# Outputs\nProvide a brief description of the receptor model: # Input the required info\n\n# Outputs\nSuccesfully stored receptor model\nSuccessfully stored the receptor model in the database.\n'})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>i,x:()=>a});var o=n(6540);const r={},s=o.createContext(r);function i(e){const t=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:t},e.children)}}}]);